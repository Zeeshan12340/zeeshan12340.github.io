{"version":3,"file":"static/js/944.df43d982.chunk.js","mappings":"gUAQe,SAASA,IACpB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,cAERC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAcjC,OAZAC,EAAAA,EAAAA,YAAU,KACK,MAAPL,EACAM,MAAMC,GACDC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKE,GAAQP,EAAQO,KACZ,MAAPV,GACPM,MAAMK,GACDH,MAAKC,GAAYA,EAASC,SAC1BF,MAAKE,GAAQP,EAAQO,IAC9B,GACD,CAACV,KAGAY,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAYC,MAAO,CAAEC,WAAY,6DAA6DC,UACzGJ,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEG,SAAU,SAAUC,OAAQ,SAAUC,YAAa,GAAIC,UAAW,UAAWC,WAAY,qBAAsBL,UACzHJ,EAAAA,EAAAA,KAACU,EAAAA,EAAa,CACVC,WAAY,CACRC,IAAKC,IAAA,OAAMC,GAAOD,EAAA,OAAKb,EAAAA,EAAAA,KAAA,OAAAI,UAAKJ,EAAAA,EAAAA,KAAA,UAASc,KAAe,EACpDC,KAAMC,IAAgD,IAA/C,OAAEC,EAAM,UAAEhB,EAAS,SAAEG,KAAaU,GAAOE,EAC5C,MAAME,EAAQ,iBAAiBC,KAAKlB,GAAa,IACjD,OAAKgB,GAAWC,GAGRD,GAAUC,GACdlB,EAAAA,EAAAA,KAACoB,EAAAA,EAAiB,CAAClB,MAAOmB,EAAAA,EAASC,SAAUJ,EAAM,GAAIK,OAAO,SAAUT,EAAKV,SAAGoB,OAAOpB,GAAUqB,QAAQ,MAAO,OAEhHzB,EAAAA,EAAAA,KAAA,QAAMC,UAAWA,KAAea,EAAKV,SAChCA,KANGJ,EAAAA,EAAAA,KAACoB,EAAAA,EAAiB,CAAClB,MAAOmB,EAAAA,EAASC,SAAS,OAAOC,OAAO,SAAUT,EAAKV,SAAGoB,OAAOpB,GAAUqB,QAAQ,MAAO,KAQvH,EAELC,GAAIC,IAAA,OAAMb,GAAOa,EAAA,OAAK3B,EAAAA,EAAAA,KAAA,MAAIC,UAAU,wBAAyBa,GAAS,GACxEV,SAEDd,OAKrB,C","sources":["components/Post.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dracula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport post1Data from '../constants/pwncollege.md';\nimport post2Data from '../constants/obscure.md';\nimport { useParams } from 'react-router-dom';\n\nexport default function Post() {\n    const { id } = useParams();\n\n    const [post, setPost] = useState('');\n\n    useEffect(() => {\n        if (id === \"1\") {\n            fetch(post1Data)\n                .then(response => response.text())\n                .then(text => setPost(text));\n        } else if (id === \"2\") {\n            fetch(post2Data)\n                .then(response => response.text())\n                .then(text => setPost(text));\n        }\n    }, [id]);\n\n    return (\n        <div className=\"mt-5 pt-5\" style={{ background: \"linear-gradient(135deg, rgb(30, 30, 45), rgb(32, 32, 60))\"}}>\n            <div style={{ maxWidth: '1000px', margin: '0 auto', paddingLeft: 10, textAlign: 'justify', fontFamily: 'Inter, Sans-Serif' }}>\n                <ReactMarkdown\n                    components={{\n                        img: ({ ...props }) => <div><img {...props} /></div>,\n                        code: ({ inline, className, children, ...props }) => {\n                            const match = /language-(\\w+)/.exec(className || '');\n                            if (!inline && !match) {\n                                return  <SyntaxHighlighter style={dracula} language=\"bash\" PreTag=\"div\" {...props}>{String(children).replace(/\\n$/, '')}</SyntaxHighlighter>\n                            }\n                            return !inline && match ? (\n                                <SyntaxHighlighter style={dracula} language={match[1]} PreTag=\"div\" {...props}>{String(children).replace(/\\n$/, '')}</SyntaxHighlighter>\n                            ) : (\n                                <code className={className} {...props}>\n                                    {children}\n                                </code>\n                            );\n                        },\n                        h1: ({ ...props }) => <h1 className=\"text-3xl font-bold\" {...props} />,\n                    }}\n                >\n                    {post}\n                </ReactMarkdown>\n            </div>\n        </div>\n    );\n}"],"names":["Post","id","useParams","post","setPost","useState","useEffect","fetch","post1Data","then","response","text","post2Data","_jsx","className","style","background","children","maxWidth","margin","paddingLeft","textAlign","fontFamily","ReactMarkdown","components","img","_ref","props","code","_ref2","inline","match","exec","SyntaxHighlighter","dracula","language","PreTag","String","replace","h1","_ref3"],"sourceRoot":""}